---
title: "Lab 14: RNASeq"
author: "Emily Ignatoff (A16732102)"
format: pdf
---

Today we will analyze differential expression of protein-coding genes in lung fibroblast cells which have lost their **HOXA1** transcription factor (Trapnell et al, 2013)

## Differential Expression Analysis

First, let's load in our data:

```{r}
#| message: false
library(DESeq2)

metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
```

```{r}
colData = read.csv(metaFile, row.names=1)
head(colData)
```

```{r}
countData = read.csv(countFile, row.names=1)
head(countData)
```

We will need to remove `countData$length` in order to have the colData and countData match.

> Q. Complete the code below to remove the troublesome first column from countData

```{r}
countData <- as.matrix(countData[,-1])
head(countData)
```

We can also clean up our data by removing all the genes where there is 0 expression all together. 

> Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
countData = countData[rowSums(countData) > 0, ]
head(countData)
```


We can now set up our dds objects for DESeq and run the DESeq pipeline:

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```
```{r}
dds
```

We can now specifically obtain result for the HOXA1 knockdown and siRNA control:

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```


> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

Let's now create a volcano plot to better visualize the up- and down- regulated genes:

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

> Q. Improve this plot by completing the below code, which adds color and axis labels

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "turquoise"

# Color those with adjusted p-value less than 0.01
#  and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "purple3"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```


We can also improve this volcano plot with gene annotations, which we can add using the `mapIDs()` function:

>Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```


## Pathway Analysis

We will now use the `gage` package to draw pathway diagrams for enriched pathways will elements colored by regulation level and direction.

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)
```

Let us focus on signaling and metabolic pathways:

```{r}
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]
head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Run the `gage` pathway analysis:

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

Let's look at the first downregulated pathways:

```{r}
head(keggres$less)
```

Let us visualize the top downregulated pathway:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```
![Cell Cycle KEGG Pathway](hsa04110.pathview.png)

Let us now focus on the top five upregulated pathways:

```{r}
keggrespathways <- rownames(keggres$greater)[1:5]

keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
Once we have extracted the hsa IDs for each of the top five upregulated pathways, we can use `pathview()` to view each one:

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04640.pathview.png)

![](hsa04630.pathview.png)

![](hsa00140.pathview.png)

![](hsa04142.pathview.png)

![](hsa04330.pathview.png)


> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
keggrespathways2 <- rownames(keggres$less)[1:5]

keggresids2 = substr(keggrespathways2, start=1, stop=8)
keggresids2
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids2, species="hsa")
```
![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)

![](hsa03440.pathview.png)

![](hsa04114.pathview.png)


## Gene Ontology (GO)

We can complete similar analyses to KEGG Pathways with a different dataset, Gene Ontology (GO):


We will be focusing on the **Biological Processes(BP)** section of the gene ontologies 

```{r}
data(go.sets.hs)
data(go.subs.hs)

gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis

The Reactome database consists of biological molecules and their relationships to pathways and processes. Our list of significantly expressed genes as determined above will be used in Reactome for over-representation enrichment analysis and pathway-topology analysis


Generate the significant genes list as a text file:

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

We can now upload this `significant_genes.txt` file to Reactome and analyze by projecting these genes onto human genomes

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway with the most significant "Entities p-value" is *SLC15A4:TASL-dependent IRF5 activation*, which is not listed in the KEGG results. There are overlapping pathways between KEGG and GO but the Gene Ontology has pathways not present in either of the top five KEGG pathways. 

I imagine that the difference in targets between KEGG and GO could lead to these differences. KEGG seeks to understand differential gene expression while GO has several other goals (for example biological processes as we targeted here).
